generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique @db.VarChar(255)
  name       String      @db.VarChar(255)
  password   String
  characters Character[]
}

model Character {
  id        Int                     @id @default(autoincrement())
  story     String
  userId    Int
  birthdate Int
  avatar    String?                 @db.VarChar(255)
  firstName String                  @db.VarChar(255)
  lastName  String                  @db.VarChar(255)
  user      User                    @relation(fields: [userId], references: [id])
  scenario  CharactersOnScenarios[]
  posts     Post[]
  skills    SkillsOnCharacters[]
}

model Skill {
  id          Int                  @id @default(autoincrement())
  name        String               @db.VarChar(255)
  description String
  skill       SkillsOnCharacters[]
  posts       Post[]
}

model SkillsOnCharacters {
  id          Int       @id @default(autoincrement())
  level       Int
  characterId Int
  skillId     Int
  character   Character @relation(fields: [characterId], references: [id])
  skill       Skill     @relation(fields: [skillId], references: [id])
}

model Scenario {
  id           Int                     @id @default(autoincrement())
  title        String                  @db.VarChar(255)
  status       ScenarioStatus          @default(INITIATED)
  era          String?                 @db.VarChar(255)
  location     String?                 @db.VarChar(255)
  thumbnail    String?                 @db.VarChar(255)
  safeTitle    String                  @db.VarChar(255)
  introduction String                  @db.VarChar(500)
  supplies     Int                     @default(5)
  characters   CharactersOnScenarios[]
  posts        Post[]
}

model CharactersOnScenarios {
  id          Int       @id @default(autoincrement())
  characterId Int
  scenarioId  Int
  textColor   String    @db.VarChar(7)
  health      Int       @default(5)
  momentum    Int       @default(2)
  spirit      Int       @default(5)
  character   Character @relation(fields: [characterId], references: [id])
  scenario    Scenario  @relation(fields: [scenarioId], references: [id])
}

model Post {
  id           Int            @id @default(autoincrement())
  content      String
  scenarioId   Int
  characterId  Int
  isGameMaster Boolean        @default(false)
  turn         Int
  skillValue   Int?
  skillId      Int?
  skill        Skill?          @relation(fields: [skillId], references: [id])
  moveId       String?        @db.VarChar(255)
  dices        DicesOnPosts[]
  character    Character      @relation(fields: [characterId], references: [id])
  scenario     Scenario       @relation(fields: [scenarioId], references: [id])
}

model DicesOnPosts {
  id     Int      @id @default(autoincrement())
  value  Int
  postId Int
  post   Post     @relation(fields: [postId], references: [id])
  type   DiceType
}

enum ScenarioStatus {
  INITIATED
  IN_PROGRESS
  FINISHED
  LOCKED
}

enum DiceType {
  ACTION
  CHALLENGE
}
